require("dotenv").config();

const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const connectDB = require("./database");

const router = express.Router();
let db;

// K·∫øt n·ªëi database
connectDB()
    .then((database) => {
        db = database;
        console.log("‚úÖ K·∫øt n·ªëi Database th√†nh c√¥ng!");
    })
    .catch((err) => {
        console.error("‚ùå L·ªói k·∫øt n·ªëi Database:", err);
    });

//ƒêƒÉng k√Ω t√†i kho·∫£n
router.post("/register", async (req, res) => {
    try {
        const { name, email, password } = req.body;

        if (!db) return res.status(500).json({ message: "L·ªói server, th·ª≠ l·∫°i sau!" });

        const normalizedEmail = email.toLowerCase().trim();

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await db.collection("users").findOne({ email: normalizedEmail });
        if (existingUser) {
            return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i!" });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);

        // Th√™m user v√†o database
        const newUser = {
            name: name || "User", // N·∫øu kh√¥ng nh·∫≠p name th√¨ m·∫∑c ƒë·ªãnh l√† "User"
            email: normalizedEmail,
            password: hashedPassword,
            createdAt: new Date(),
        };

        await db.collection("users").insertOne(newUser);
        console.log("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng cho email:", normalizedEmail);

        res.json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng!" });
    } catch (error) {
        console.error("L·ªói ƒëƒÉng k√Ω:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
});

// ƒêƒÉng nh·∫≠p
router.post("/login", async (req, res) => {
    try {
        const { email, password } = req.body;

        console.log("üì© Email nh·∫≠n ƒë∆∞·ª£c:", email);
        console.log("üîë M·∫≠t kh·∫©u nh·∫≠n ƒë∆∞·ª£c:", password);

        if (!db) return res.status(500).json({ message: "L·ªói server, th·ª≠ l·∫°i sau!" });

        const normalizedEmail = email.toLowerCase().trim();
        console.log("üì© Email chu·∫©n h√≥a:", normalizedEmail);

        // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
        const user = await db.collection("users").findOne({ email: normalizedEmail });
        console.log("üßë‚Äçüíª User t√¨m th·∫•y:", user);

        if (!user) {
            console.log("‚ùå User kh√¥ng t·ªìn t·∫°i:", normalizedEmail);
            return res.status(400).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u
        const isMatch = await bcrypt.compare(password, user.password);
        console.log("M·∫≠t kh·∫©u nh·∫≠p:", password);
        console.log("M·∫≠t kh·∫©u trong DB:", user.password);
        console.log("K·∫øt qu·∫£ so s√°nh:", isMatch);

        console.log("üîê K·∫øt qu·∫£ ki·ªÉm tra m·∫≠t kh·∫©u:", isMatch);

        if (!isMatch) {
            console.log("‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng cho user:", normalizedEmail);
            return res.status(400).json({ message: "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
        }

        // T·∫°o token
        console.log("üîë Gi√° tr·ªã JWT_SECRET:", process.env.JWT_SECRET);

        const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });
        console.log("‚úÖ T·∫°o token th√†nh c√¥ng:", token);

        res.json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", token, email: user.email }); // Include email
    } catch (error) {
        console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
});

//L·∫•y th√¥ng tin user (code JWT)
router.get("/profile", async (req, res) => {
    try {
        const token = req.headers.authorization;
        if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token!" });

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const user = await db.collection("users").findOne({ _id: decoded.userId });

        if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user!" });

        res.json({ name: user.name, email: user.email, createdAt: user.createdAt });
    } catch (error) {
        console.error("L·ªói l·∫•y profile:", error);
        res.status(500).json({ message: "L·ªói server!" });
    }
});

module.exports = router;
